[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = ["migrations"]

[tool.ruff.lint]
# Enable essential linting rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]

ignore = [
    "COM812",  # Trailing comma missing (conflicts with black)
    "ISC001",  # Single line implicit string concatenation (conflicts with black)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "F401",    # Unused imports in tests
]
"migrations/*" = ["ALL"]
"__init__.py" = ["F401"]  # Unused imports OK in __init__.py

[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "testcontainers.*",
    "alembic.*",
    "psycopg2.*",
    "asyncpg.*",
    "redis.*",
    "requests.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.cache.redis_cache"
warn_unused_ignores = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests with mocked dependencies",
    "integration: Integration tests with actual PostgreSQL database using testcontainers",
    "database: Tests that require real database connections",
    "performance: Performance and load testing scenarios",
    "slow: Tests that take a long time to run",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]