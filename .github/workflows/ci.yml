name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: "3.12"

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff
        
    - name: Format and lint with ruff
      run: |
        ruff format --check src/ tests/
        ruff check src/ tests/ --output-format=github
        
    - name: Type checking (mypy)
      run: |
        mypy src/ --ignore-missing-imports --disallow-untyped-defs
        
    - name: Security scan (bandit)
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up Docker for testcontainers
      run: |
        # Ensure Docker is running and accessible
        docker --version
        docker info
        
    - name: Run integration tests
      run: |
        # Set testcontainers environment variables
        export TESTCONTAINERS_RYUK_DISABLED=true
        export TESTCONTAINERS_CHECKS_DISABLE=true
        
        # Run integration tests with timeout per test
        pytest tests/integration/ -v --tb=short --timeout=60
        
    - name: Clean up Docker containers
      if: always()
      run: |
        docker container prune -f || true
        docker volume prune -f || true

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
        
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: safety-report.json

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create minimal Dockerfile for testing
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.12-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            postgresql-client \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy source code
        COPY src/ src/
        COPY tests/ tests/
        COPY alembic/ alembic/
        COPY alembic.ini .
        
        # Run basic validation
        RUN python -c "import src.database.config; import src.database.connection"
        
        CMD ["python", "-m", "pytest", "tests/unit/", "-v"]
        EOF
        
    - name: Build Docker image
      run: |
        docker build -t agentic-workflow:test .
        
    - name: Test Docker image
      run: |
        docker run --rm agentic-workflow:test python -c "
        import src.database.config
        import src.database.connection
        print('✅ All imports successful')
        "

  all-checks:
    name: All Checks Complete
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, dependency-scan, docker-build]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Code quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        
        echo "✅ All critical checks passed!"